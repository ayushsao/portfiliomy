"use client"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Separator } from "@/components/ui/separator"
import { ThemeToggle } from "@/components/theme-toggle"
import {
  Github,
  Linkedin,
  Mail,
  Phone,
  MapPin,
  ExternalLink,
  Code,
  Palette,
  Database,
  Globe,
  Download,
  ArrowRight,
  Menu,
  X,
} from "lucide-react"
import { useState, useEffect, useRef } from "react"
import { useTheme } from "next-themes"
import { useGSAP } from "@/hooks/use-gsap"
import { useLenis } from "@/hooks/use-lenis"

export default function Portfolio() {
  const [isMenuOpen, setIsMenuOpen] = useState(false)
  const [mounted, setMounted] = useState(false)
  const { theme, setTheme } = useTheme()
  const { gsap, ScrollTrigger } = useGSAP()
  const lenis = useLenis()

  const heroRef = useRef<HTMLElement>(null)
  const aboutRef = useRef<HTMLElement>(null)
  const skillsRef = useRef<HTMLElement>(null)
  const projectsRef = useRef<HTMLElement>(null)
  const contactRef = useRef<HTMLElement>(null)

  // Handle hydration
  useEffect(() => {
    setMounted(true)
  }, [])

  const toggleTheme = () => {
    setTheme(theme === "dark" ? "light" : "dark")
  }

  useEffect(() => {
    if (!mounted || !gsap || !ScrollTrigger) return

    // Set 3D perspective for the entire page
    gsap.set("body", { perspective: 1000 })

    // Enhanced Hero animations with 3D effects
    const tl = gsap.timeline()

      tl.fromTo(
        ".hero-content",
        { opacity: 0, y: 100, rotationX: 45, scale: 0.8 },
        { opacity: 1, y: 0, rotationX: 0, scale: 1, duration: 1.5, ease: "power3.out" },
      )

      tl.fromTo(
        ".hero-avatar",
        { scale: 0, rotation: -180, rotationY: 180 },
        { scale: 1, rotation: 0, rotationY: 0, duration: 1.2, ease: "back.out(1.7)" },
        "-=1",
      )

      // 3D Navigation items
      gsap.fromTo(
        ".nav-item",
        { opacity: 0, y: -20, rotationX: -90 },
        { opacity: 1, y: 0, rotationX: 0, duration: 0.6, stagger: 0.1, delay: 0.5 },
      )

      // 3D About section with advanced transforms
      gsap.fromTo(
        ".about-image",
        {
          opacity: 0,
          x: -100,
          rotationY: -45,
          rotationX: 15,
          scale: 0.8,
        },
        {
          opacity: 1,
          x: 0,
          rotationY: 0,
          rotationX: 0,
          scale: 1,
          duration: 1.5,
          ease: "power3.out",
          scrollTrigger: {
            trigger: ".about-image",
            start: "top 80%",
            end: "bottom 20%",
            scrub: 1,
          },
        },
      )

      gsap.fromTo(
        ".about-text",
        {
          opacity: 0,
          x: 100,
          rotationY: 45,
          rotationX: -15,
        },
        {
          opacity: 1,
          x: 0,
          rotationY: 0,
          rotationX: 0,
          duration: 1.5,
          ease: "power3.out",
          scrollTrigger: {
            trigger: ".about-text",
            start: "top 80%",
            end: "bottom 20%",
            scrub: 1,
          },
        },
      )

      // 3D Skills cards with flip animation
      gsap.fromTo(
        ".skill-card",
        {
          opacity: 0,
          y: 100,
          rotationX: 90,
          rotationY: 45,
          scale: 0.5,
        },
        {
          opacity: 1,
          y: 0,
          rotationX: 0,
          rotationY: 0,
          scale: 1,
          duration: 1.2,
          stagger: 0.15,
          ease: "back.out(1.7)",
          scrollTrigger: {
            trigger: ".skills-grid",
            start: "top 80%",
            end: "bottom 20%",
          },
        },
      )

      // 3D Projects with complex transforms
      gsap.fromTo(
        ".project-card",
        {
          opacity: 0,
          y: 150,
          rotationX: 75,
          rotationY: -30,
          rotationZ: 15,
          scale: 0.3,
        },
        {
          opacity: 1,
          y: 0,
          rotationX: 0,
          rotationY: 0,
          rotationZ: 0,
          scale: 1,
          duration: 1.5,
          stagger: 0.2,
          ease: "power3.out",
          scrollTrigger: {
            trigger: ".projects-grid",
            start: "top 80%",
            end: "bottom 20%",
          },
        },
      )

      // 3D Contact section with sphere-like entrance
      gsap.fromTo(
        ".contact-content",
        {
          opacity: 0,
          scale: 0.1,
          rotationX: 180,
          rotationY: 180,
          rotationZ: 180,
        },
        {
          opacity: 1,
          scale: 1,
          rotationX: 0,
          rotationY: 0,
          rotationZ: 0,
          duration: 2,
          ease: "power3.out",
          scrollTrigger: {
            trigger: ".contact-content",
            start: "top 80%",
            end: "bottom 20%",
          },
        },
      )

      // Continuous 3D floating animation for hero avatar
      gsap.to(".hero-avatar", {
        y: -20,
        rotationY: 360,
        duration: 4,
        ease: "power2.inOut",
        yoyo: true,
        repeat: -1,
      })

      // 3D Parallax layers with different depths
      gsap.utils.toArray(".parallax-layer-1").forEach((element: any) => {
        gsap.fromTo(
          element,
          { y: -100, rotationX: -15 },
          {
            y: 100,
            rotationX: 15,
            ease: "none",
            scrollTrigger: {
              trigger: element,
              start: "top bottom",
              end: "bottom top",
              scrub: 2,
            },
          },
        )
      })

      gsap.utils.toArray(".parallax-layer-2").forEach((element: any) => {
        gsap.fromTo(
          element,
          { y: -50, rotationY: -10 },
          {
            y: 50,
            rotationY: 10,
            ease: "none",
            scrollTrigger: {
              trigger: element,
              start: "top bottom",
              end: "bottom top",
              scrub: 1,
            },
          },
        )
      })

      // 3D Text reveal animations
      gsap.utils.toArray(".text-3d").forEach((element: any) => {
        gsap.fromTo(
          element,
          {
            opacity: 0,
            rotationX: 90,
            transformOrigin: "50% 50% -50px",
          },
          {
            opacity: 1,
            rotationX: 0,
            duration: 1,
            ease: "power3.out",
            scrollTrigger: {
              trigger: element,
              start: "top 85%",
              end: "bottom 15%",
            },
          },
        )
      })

      // 3D Skill progress bars with rotation
      gsap.utils.toArray(".skill-progress").forEach((element: any, index: number) => {
        gsap.fromTo(
          element,
          {
            width: "0%",
            rotationY: 90,
            transformOrigin: "left center",
          },
          {
            width: element.dataset.width || "0%",
            rotationY: 0,
            duration: 1.5,
            delay: index * 0.1,
            ease: "power3.out",
            scrollTrigger: {
              trigger: element,
              start: "top 80%",
              end: "bottom 20%",
            },
          },
        )
      })

      // 3D Hover effects for project cards
      gsap.utils.toArray(".project-card").forEach((card: any) => {
        const image = card.querySelector("img")

        card.addEventListener("mouseenter", () => {
          gsap.to(card, {
            rotationY: 10,
            rotationX: 5,
            scale: 1.05,
            duration: 0.3,
            ease: "power2.out",
          })
          gsap.to(image, {
            scale: 1.1,
            rotationZ: 2,
            duration: 0.3,
            ease: "power2.out",
          })
        })

        card.addEventListener("mouseleave", () => {
          gsap.to(card, {
            rotationY: 0,
            rotationX: 0,
            scale: 1,
            duration: 0.3,
            ease: "power2.out",
          })
          gsap.to(image, {
            scale: 1,
            rotationZ: 0,
            duration: 0.3,
            ease: "power2.out",
          })
        })
      })

      // 3D Scroll-based rotation for sections
      gsap.utils.toArray(".rotate-on-scroll").forEach((element: any) => {
        gsap.to(element, {
          rotationY: 360,
          ease: "none",
          scrollTrigger: {
            trigger: element,
            start: "top bottom",
            end: "bottom top",
            scrub: 2,
          },
        })
      })

      // 3D Morphing background elements
      gsap.utils.toArray(".morph-bg").forEach((element: any, index: number) => {
        gsap.to(element, {
          rotationX: 360,
          rotationY: 180,
          scale: 1.5,
          duration: 20 + index * 5,
          ease: "none",
          repeat: -1,
          yoyo: true,
        })
      })

      // Advanced 3D text splitting animation
      gsap.utils.toArray(".split-text").forEach((element: any) => {
        const chars = element.textContent.split("")
        element.innerHTML = chars
          .map(
            (char: string, i: number) =>
              `<span class="char" style="display: inline-block; transform-origin: 50% 50% -20px;">${char === " " ? "&nbsp;" : char}</span>`,
          )
          .join("")

        gsap.fromTo(
          element.querySelectorAll(".char"),
          {
            opacity: 0,
            rotationX: 90,
            y: 50,
          },
          {
            opacity: 1,
            rotationX: 0,
            y: 0,
            duration: 0.8,
            stagger: 0.05,
            ease: "back.out(1.7)",
            scrollTrigger: {
              trigger: element,
              start: "top 80%",
              end: "bottom 20%",
            },
          },
        )
      })
    }
  }, [mounted, gsap, ScrollTrigger])

  const skills = [
    { name: "JavaScript", icon: Code, level: 90 },
    { name: "React", icon: Code, level: 85 },
    { name: "Node.js", icon: Database, level: 80 },
    { name: "Python", icon: Code, level: 75 },
    { name: "UI/UX Design", icon: Palette, level: 70 },
    { name: "MongoDB", icon: Database, level: 80 },
    { name: "Next.js", icon: Globe, level: 85 },
    { name: "TypeScript", icon: Code, level: 80 },
  ]

  const projects = [
    {
      title: "E-Commerce Platform",
      description:
        "A full-stack e-commerce solution with payment integration, user authentication, and admin dashboard.",
      tech: ["React", "Node.js", "MongoDB", "Stripe"],
      image: "/placeholder.svg?height=200&width=300",
      github: "#",
      live: "#",
    },
    {
      title: "Task Management App",
      description:
        "A collaborative task management application with real-time updates and team collaboration features.",
      tech: ["Next.js", "TypeScript", "Prisma", "PostgreSQL"],
      image: "/placeholder.svg?height=200&width=300",
      github: "#",
      live: "#",
    },
    {
      title: "Weather Analytics Dashboard",
      description: "A data visualization dashboard showing weather patterns and analytics with interactive charts.",
      tech: ["React", "D3.js", "Python", "FastAPI"],
      image: "/placeholder.svg?height=200&width=300",
      github: "#",
      live: "#",
    },
  ]

  return (
    <div
      className={`min-h-screen transition-colors duration-500 ${
        isDark
          ? "bg-gradient-to-br from-gray-900 via-gray-800 to-black text-white"
          : "bg-gradient-to-br from-slate-50 to-gray-100 text-gray-900"
      }`}
    >
      {/* Navigation */}
      <nav
        className={`fixed top-0 w-full z-50 border-b transition-all duration-300 ${
          isDark ? "bg-gray-900/80 backdrop-blur-md border-gray-700" : "bg-white/80 backdrop-blur-md border-gray-200"
        }`}
      >
        <div className="container mx-auto px-6 py-4">
          <div className="flex justify-between items-center">
            <h1 className="text-2xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent">
              AKS
            </h1>

            {/* Desktop Navigation */}
            <div className="hidden md:flex items-center space-x-8">
              <a href="#about" className="nav-item hover:text-purple-600 transition-colors">
                About
              </a>
              <a href="#skills" className="nav-item hover:text-purple-600 transition-colors">
                Skills
              </a>
              <a href="#projects" className="nav-item hover:text-purple-600 transition-colors">
                Projects
              </a>
              <a href="#contact" className="nav-item hover:text-purple-600 transition-colors">
                Contact
              </a>
              <ThemeToggle />
            </div>

            {/* Mobile Navigation */}
            <div className="md:hidden flex items-center gap-4">
              <ThemeToggle />
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setIsMenuOpen(!isMenuOpen)}
                className="w-9 h-9 rounded-full"
              >
                {isMenuOpen ? <X className="h-4 w-4" /> : <Menu className="h-4 w-4" />}
              </Button>
            </div>
          </div>

          {/* Mobile Menu */}
          {isMenuOpen && (
            <div className={`md:hidden mt-4 pb-4 border-t ${isDark ? "border-gray-700" : "border-gray-200"}`}>
              <div className="flex flex-col space-y-4 pt-4">
                <a
                  href="#about"
                  className="hover:text-purple-600 transition-colors"
                  onClick={() => setIsMenuOpen(false)}
                >
                  About
                </a>
                <a
                  href="#skills"
                  className="hover:text-purple-600 transition-colors"
                  onClick={() => setIsMenuOpen(false)}
                >
                  Skills
                </a>
                <a
                  href="#projects"
                  className="hover:text-purple-600 transition-colors"
                  onClick={() => setIsMenuOpen(false)}
                >
                  Projects
                </a>
                <a
                  href="#contact"
                  className="hover:text-purple-600 transition-colors"
                  onClick={() => setIsMenuOpen(false)}
                >
                  Contact
                </a>
              </div>
            </div>
          )}
        </div>
      </nav>

      {/* Hero Section */}
      <section ref={heroRef} className="pt-32 pb-20 px-6 relative overflow-hidden" style={{ perspective: "1000px" }}>
        <div className="absolute inset-0">
          <div className="parallax-layer-1 morph-bg absolute top-20 left-10 w-72 h-72 bg-purple-500/10 rounded-full blur-3xl"></div>
          <div className="parallax-layer-2 morph-bg absolute bottom-20 right-10 w-96 h-96 bg-pink-500/10 rounded-full blur-3xl"></div>
          <div className="parallax-layer-1 absolute top-1/2 left-1/2 w-64 h-64 bg-gradient-to-r from-purple-400/5 to-pink-400/5 rounded-full blur-2xl transform -translate-x-1/2 -translate-y-1/2"></div>
        </div>

        <div className="container mx-auto text-center relative z-10">
          <div className="hero-content">
            <div className="mb-8">
              <div
                className="hero-avatar w-32 h-32 mx-auto mb-6 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 flex items-center justify-center text-white text-4xl font-bold shadow-2xl"
                style={{ transformStyle: "preserve-3d" }}
              >
                AKS
              </div>
            </div>
            <h1 className="split-text text-5xl md:text-7xl font-bold mb-6 bg-gradient-to-r from-purple-600 via-pink-600 to-purple-600 bg-clip-text text-transparent">
              Ayush Kumar Sao
            </h1>
            <p
              className={`text-3d text-xl md:text-2xl mb-8 max-w-3xl mx-auto ${isDark ? "text-gray-300" : "text-gray-600"}`}
            >
              Full Stack Developer & UI/UX Designer crafting digital experiences that make a difference
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <Button
                size="lg"
                className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 transform hover:scale-105 transition-all duration-300"
                style={{ transformStyle: "preserve-3d" }}
              >
                <Download className="w-4 h-4 mr-2" />
                Download Resume
              </Button>
              <Button
                size="lg"
                variant="outline"
                className={`transform hover:scale-105 transition-all duration-300 ${
                  isDark ? "border-gray-600 hover:bg-gray-800" : "hover:bg-gray-50"
                }`}
                style={{ transformStyle: "preserve-3d" }}
              >
                <Mail className="w-4 h-4 mr-2" />
                Get In Touch
              </Button>
            </div>
          </div>
        </div>
      </section>

      {/* About Section */}
      <section
        id="about"
        ref={aboutRef}
        className={`py-20 px-6 ${isDark ? "bg-gray-800/50" : "bg-white"}`}
        style={{ perspective: "1000px" }}
      >
        <div className="container mx-auto">
          <div className="max-w-4xl mx-auto">
            <h2 className="text-3d text-4xl font-bold text-center mb-12 bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent">
              About Me
            </h2>
            <div className="grid md:grid-cols-2 gap-12 items-center">
              <div className="about-image" style={{ transformStyle: "preserve-3d" }}>
                <img
                  src="/placeholder.svg?height=400&width=400"
                  alt="Ayush Kumar Sao"
                  className="rounded-2xl shadow-2xl transform hover:scale-105 transition-transform duration-500"
                  style={{ transformStyle: "preserve-3d" }}
                />
              </div>
              <div className="about-text space-y-6" style={{ transformStyle: "preserve-3d" }}>
                <p className={`text-3d text-lg leading-relaxed ${isDark ? "text-gray-300" : "text-gray-600"}`}>
                  {
                    "I'm a passionate full-stack developer with over 3 years of experience creating innovative web applications and digital solutions. I specialize in modern JavaScript frameworks and have a keen eye for design."
                  }
                </p>
                <p className={`text-3d text-lg leading-relaxed ${isDark ? "text-gray-300" : "text-gray-600"}`}>
                  When I'm not coding, you can find me exploring new technologies, contributing to open-source projects,
                  or sharing knowledge with the developer community.
                </p>
                <div className="flex flex-wrap gap-4">
                  <div className={`text-3d flex items-center gap-2 ${isDark ? "text-gray-300" : "text-gray-600"}`}>
                    <MapPin className="w-4 h-4" />
                    <span>India</span>
                  </div>
                  <div className={`text-3d flex items-center gap-2 ${isDark ? "text-gray-300" : "text-gray-600"}`}>
                    <Mail className="w-4 h-4" />
                    <span>ayush@example.com</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Skills Section */}
      <section
        id="skills"
        ref={skillsRef}
        className={`py-20 px-6 ${isDark ? "bg-gray-900/50" : "bg-gray-50"}`}
        style={{ perspective: "1000px" }}
      >
        <div className="container mx-auto">
          <h2 className="text-3d text-4xl font-bold text-center mb-12 bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent">
            Skills & Expertise
          </h2>
          <div className="skills-grid grid md:grid-cols-2 lg:grid-cols-4 gap-6 max-w-6xl mx-auto">
            {skills.map((skill, index) => (
              <Card
                key={skill.name}
                className={`skill-card hover:shadow-xl transition-all duration-300 transform hover:-translate-y-2 ${
                  isDark ? "bg-gray-800 border-gray-700 hover:bg-gray-750" : "bg-white hover:shadow-lg"
                }`}
                style={{ transformStyle: "preserve-3d" }}
              >
                <CardContent className="p-6 text-center">
                  <skill.icon className="rotate-on-scroll w-12 h-12 mx-auto mb-4 text-purple-600" />
                  <h3 className="font-semibold mb-2">{skill.name}</h3>
                  <div className={`w-full rounded-full h-2 ${isDark ? "bg-gray-700" : "bg-gray-200"}`}>
                    <div
                      className="skill-progress bg-gradient-to-r from-purple-600 to-pink-600 h-2 rounded-full transition-all duration-1000"
                      data-width={`${skill.level}%`}
                      style={{ transformStyle: "preserve-3d" }}
                    />
                  </div>
                  <span className={`text-sm mt-2 block ${isDark ? "text-gray-400" : "text-gray-600"}`}>
                    {skill.level}%
                  </span>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </section>

      {/* Projects Section */}
      <section
        id="projects"
        ref={projectsRef}
        className={`py-20 px-6 ${isDark ? "bg-gray-800/50" : "bg-white"}`}
        style={{ perspective: "1000px" }}
      >
        <div className="container mx-auto">
          <h2 className="text-3d text-4xl font-bold text-center mb-12 bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent">
            Featured Projects
          </h2>
          <div className="projects-grid grid md:grid-cols-2 lg:grid-cols-3 gap-8 max-w-7xl mx-auto">
            {projects.map((project, index) => (
              <Card
                key={project.title}
                className={`project-card overflow-hidden hover:shadow-2xl transition-all duration-500 group transform hover:-translate-y-4 ${
                  isDark ? "bg-gray-800 border-gray-700" : "bg-white"
                }`}
                style={{ transformStyle: "preserve-3d" }}
              >
                <div className="relative overflow-hidden">
                  <img
                    src={project.image || "/placeholder.svg"}
                    alt={project.title}
                    className="w-full h-48 object-cover group-hover:scale-110 transition-transform duration-500"
                    style={{ transformStyle: "preserve-3d" }}
                  />
                  <div className="absolute inset-0 bg-gradient-to-t from-black/80 via-black/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center">
                    <div className="flex gap-4 transform translate-y-4 group-hover:translate-y-0 transition-transform duration-300">
                      <Button
                        size="sm"
                        variant="secondary"
                        className="backdrop-blur-sm"
                        style={{ transformStyle: "preserve-3d" }}
                      >
                        <Github className="w-4 h-4 mr-2" />
                        Code
                      </Button>
                      <Button
                        size="sm"
                        variant="secondary"
                        className="backdrop-blur-sm"
                        style={{ transformStyle: "preserve-3d" }}
                      >
                        <ExternalLink className="w-4 h-4 mr-2" />
                        Live
                      </Button>
                    </div>
                  </div>
                </div>
                <CardHeader>
                  <CardTitle className="text-xl">{project.title}</CardTitle>
                  <CardDescription className={isDark ? "text-gray-400" : "text-gray-600"}>
                    {project.description}
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="flex flex-wrap gap-2">
                    {project.tech.map((tech) => (
                      <Badge
                        key={tech}
                        variant="secondary"
                        className={`text-xs ${isDark ? "bg-gray-700 text-gray-300" : "bg-gray-100 text-gray-700"}`}
                        style={{ transformStyle: "preserve-3d" }}
                      >
                        {tech}
                      </Badge>
                    ))}
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
          <div className="text-center mt-12">
            <Button
              variant="outline"
              size="lg"
              className={`transform hover:scale-105 transition-all duration-300 ${
                isDark ? "border-gray-600 hover:bg-gray-800" : "hover:bg-gray-50"
              }`}
              style={{ transformStyle: "preserve-3d" }}
            >
              View All Projects
              <ArrowRight className="w-4 h-4 ml-2" />
            </Button>
          </div>
        </div>
      </section>

      {/* Contact Section */}
      <section
        id="contact"
        ref={contactRef}
        className="py-20 px-6 bg-gradient-to-r from-purple-600 to-pink-600 text-white relative overflow-hidden"
      >
        <div className="absolute inset-0">
          <div className="absolute top-10 left-10 w-64 h-64 bg-white/10 rounded-full blur-3xl"></div>
          <div className="absolute bottom-10 right-10 w-80 h-80 bg-white/5 rounded-full blur-3xl"></div>
        </div>

        <div className="container mx-auto text-center relative z-10">
          <div className="contact-content">
            <h2 className="text-4xl font-bold mb-8">{"Let's Work Together"}</h2>
            <p className="text-xl mb-12 max-w-2xl mx-auto opacity-90">
              {
                "I'm always interested in new opportunities and exciting projects. Let's discuss how we can bring your ideas to life."
              }
            </p>
            <div className="flex flex-col sm:flex-row gap-6 justify-center items-center">
              <Button
                size="lg"
                variant="secondary"
                className="bg-white text-purple-600 hover:bg-gray-100 transform hover:scale-105 transition-all duration-300"
              >
                <Mail className="w-4 h-4 mr-2" />
                ayush@example.com
              </Button>
              <Button
                size="lg"
                variant="secondary"
                className="bg-white text-purple-600 hover:bg-gray-100 transform hover:scale-105 transition-all duration-300"
              >
                <Phone className="w-4 h-4 mr-2" />
                +91 12345 67890
              </Button>
            </div>
            <Separator className="my-12 bg-white/20" />
            <div className="flex justify-center gap-6">
              <Button
                variant="ghost"
                size="lg"
                className="text-white hover:bg-white/10 transform hover:scale-110 transition-all duration-300"
              >
                <Github className="w-6 h-6" />
              </Button>
              <Button
                variant="ghost"
                size="lg"
                className="text-white hover:bg-white/10 transform hover:scale-110 transition-all duration-300"
              >
                <Linkedin className="w-6 h-6" />
              </Button>
              <Button
                variant="ghost"
                size="lg"
                className="text-white hover:bg-white/10 transform hover:scale-110 transition-all duration-300"
              >
                <Mail className="w-6 h-6" />
              </Button>
            </div>
          </div>
        </div>
      </section>

      {/* Footer */}
      <footer className={`py-8 px-6 text-center ${isDark ? "bg-gray-900" : "bg-gray-900 text-white"}`}>
        <p className="text-gray-400">© 2024 Ayush Kumar Sao. All rights reserved.</p>
      </footer>
    </div>
  )
}
